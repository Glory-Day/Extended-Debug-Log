name: Build UPM Package

on:
  push:
    branches:
      - develop

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Extract repository name
        id: repo
        run: |
          RAW_REPOSITORY_NAME=$(basename $GITHUB_REPOSITORY)
          NORMALIZED_REPOSITORY_NAME=$(echo "$RAW_REPOSITORY_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9-')
          DISPLAY_NAME=$(echo "$RAW_REPOSITORY_NAME" | sed -E 's/-/ /g' | sed -E "s/\b(.)/\u\1/g")

          echo "raw_repository_name=$RAW_REPOSITORY_NAME" >> $GITHUB_OUTPUT
          echo "normalized_repository_name=$NORMALIZED_REPOSITORY_NAME" >> $GITHUB_OUTPUT
          echo "display_name=$DISPLAY_NAME" >> $GITHUB_OUTPUT 
    
      - name: Checkout develop branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: develop

      - name: Back up assets
        run: |
          mkdir -p ${{ runner.temp }}/package
          if [ -d "Assets/Runtime" ]; then
            cp -R Assets/Runtime ${{ runner.temp }}/package/
            cp Assets/Runtime.meta ${{ runner.temp }}/package/Runtime/Runtime.meta
          fi
          if [ -d "Assets/Editor" ]; then
            cp -R Assets/Editor ${{ runner.temp }}/package/
            cp Assets/Editor.meta ${{ runner.temp }}/package/Editor/Editor.meta
          fi

      - name: Switch to master branch
        run: |
          git fetch origin master || true
          git checkout -B master origin/master || git checkout -B master
          rm -rf Runtime Editor

      - name: Restore assets into master branch
        run: |
          cp -R ${{ runner.temp }}/package/Runtime Runtime
          cp -R ${{ runner.temp }}/package/Editor Editor

      - name: Determine version
        id: bump
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "Last tag: $LAST_TAG"

          VERSION=${LAST_TAG#v}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          MESSAGE=$(git log origin/develop -1 --pretty=%B)
          echo "Commit message: $MESSAGE"

          NEW_MAJOR=$MAJOR
          NEW_MINOR=$MINOR
          NEW_PATCH=$PATCH

          if [[ $MESSAGE == *"BREAKING CHANGE"* ]] || [[ $MESSAGE == *!* ]]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
          elif [[ $MESSAGE == Feature:* ]]; then
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
          elif [[ $MESSAGE == Fix:* ]]; then
            NEW_PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          NEW_VERSION=${{ steps.bump.outputs.new_version }}
          if [ -f package.json ]; then
            jq --arg v "$NEW_VERSION" '.version=$v' package.json > package.tmp.json
            mv package.tmp.json package.json
          else
            jq -n \
              --arg name "com.gloryday.${{ steps.repo.outputs.normalized_repository_name }}" \
              --arg display "${{ steps.repo.outputs.display_name }}" \
              --arg version "${{ steps.bump.outputs.new_version }}" \
              '{
                name: $name,
                displayName: $display,
                version: $version,
                description: "This is a logging feature that offers greater convenience than the existing 'Debug.Log' format.",
                author: { name: "Glory Day", email: "alwaysgloryday@gmail.com" }
              }' > package.json
          fi

      - name: Commit and push to master branch
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add -A
          git commit -m "CI/CD: sync from develop (${GITHUB_SHA})" || echo "No changes"
          git push origin master

      - name: Tag new version
        run: |
          VERSION=${{ steps.bump.outputs.new_version }}
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists, skipping."
          else
            git tag "$VERSION"
            git push origin "$VERSION"
          fi
